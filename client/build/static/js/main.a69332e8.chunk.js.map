{"version":3,"sources":["logo.svg","Component/Message/Message.js","Component/MessageList/MessageList.js","Component/MessageForm/MessageForm.js","Component/RoomList/RoomList.js","Component/NewRoomForm/NewRoomForm.js","App.js","config/chatkit.js","Component/Register/Register.js","Component/NotFound/NotFound.js","config/routes.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Message","props","name","isCurrentUser","currentUser","message","senderId","react_default","a","createElement","className","src","concat","alt","text","MessageList","node","ReactDOM","findDOMNode","this","scrollTop","clientHeight","lineHeight","scrollHeight","_this","roomId","messages","map","index","Component_Message_Message","key","Component","MessageForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","handleSendMessage","onSubmit","disabled","placeholder","type","onChange","RoomList","orderedRooms","Object","toConsumableArray","rooms","sort","b","toUpperCase","room","isActive","id","onClick","subscribeToRoom","NewRoomForm","roomName","handleCreateRoom","handleFocus","console","log","onFocus","required","React","theme","--main-color","--primary-message-color","--secondary-message-color","--main-text-color","--secondary-text-color","--send-message-form","--background-color","App","userId","joinableRooms","joinedRooms","getRooms","getJoinableRooms","then","catch","error","messageLimit","hooks","onNewMessage","sendMessage","createRoom","err","updateCSSVariables","variables","each","prop","document","documentElement","style","setProperty","_this2","match","params","Chatkit","ChatManager","instanceLocator","tokenProvider","TokenProvider","url","connect","Component_RoomList_RoomList","MessageList_MessageList","MessageForm_MessageForm","Component_NewRoomForm_NewRoomForm","Register","isExist","users","fetchUsers","_callee","response","body","regenerator_default","wrap","_context","prev","next","fetch","sent","json","status","Error","abrupt","stop","event","some","user","history","push","registerNewUser","newUser","_callee2","_context2","method","headers","Accept","Content-Type","JSON","stringify","textTransform","NotFound","MyRouter","Switch","Route","path","component","exact","Boolean","window","location","hostname","render","BrowserRouter","routes","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a69332e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport './styles.css';\n\nconst Message = props => {\n  const isCurrentUser = props.currentUser === props.message.senderId ? ' u-background-blue u-text-white ' : ' u-background-gray ';\n  // const placeOtherMessageToRight = props.currentUser !== props.message.senderId ? ' u-others-messages ' : '';\n  const UIAvatar = (name) => `https://ui-avatars.com/api/?name=${name}&size=32&rounded=true`\n\n  return (\n    <div className=\"message-container\">\n      <div className=\"message-avatar\">\n        <img src={UIAvatar(props.message.senderId)} alt=\"\"></img>\n      </div>\n\n      <div className={\"message\"}>\n        <div className=\"message-username\"> {props.message.senderId}: </div>\n        <div className={\"message-text\" + isCurrentUser}>\n          <span>{props.message.text}</span>\n        </div>\n      </div>\n    </div>\n\n  );\n};\n\n// Message.propTypes = {\n\n// };\n\nexport default Message;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport { Message } from '../Message';\n\n\nexport default class MessageList extends Component {\n  componentDidUpdate() {\n    const node = ReactDOM.findDOMNode(this);\n    const lineHeight = 52;\n    const shouldScrollToBottom = node.scrollTop + node.clientHeight + lineHeight * 4 >= node.scrollHeight\n\n    // console.log('object test', shouldScrollToBottom, node.scrollTop, node.clientHeight, node.scrollHeight)\n    if (shouldScrollToBottom) {\n      node.scrollTop = node.scrollHeight\n    }\n  }\n\n  render() {\n    if (!this.props.roomId) {\n      return (\n        <div className=\"message-list\">\n          <div className=\"join-room\">\n            &larr; Join a room!\n              </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"message-list\">\n        {this.props.messages.map((message, index) => {\n          return (\n            <Message key={index} currentUser={this.props.currentUser} message={message} />\n          )\n        })}\n      </div>\n    )\n  }\n}\n\n\nMessageList.propTypes = {\n  messages: PropTypes.array,\n};\n","import React, { Component } from 'react'\n// import PropTypes from 'prop-types';\n\n\n\nexport default class MessageForm extends Component {\n  state = {\n    message: '',\n  }\n\n  handleChange = (e) => {\n    this.setState({ message: e.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.handleSendMessage(this.state.message);\n    this.setState({ message: '' });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"send-message-form\">\n        <input\n          disabled={this.props.disabled}\n          placeholder=\"Write a message...\"\n          type=\"text\"\n          onChange={this.handleChange}\n          value={this.state.message}\n        />\n      </form>\n    )\n  }\n}\n\n\n// MessageForm.propTypes = {\n\n// };\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nconst RoomList = props => {\n  // sort the room in order A -> Z\n  const orderedRooms = [...props.rooms].sort((a, b) => {\n    if (a.name.toUpperCase() > b.name.toUpperCase()) { return 1; }\n    if (a.name.toUpperCase() < b.name.toUpperCase()) { return -1; }\n    return 0;\n  })\n\n  return (\n    <div className=\"rooms-list\">\n\n        <h3>Your rooms</h3>\n        {orderedRooms.map((room, index) => {\n          const isActive = room.id === props.roomId ? 'active' : '';\n\n          return (\n            <div key={index} className={'room ' + isActive}>\n              <div onClick={() => props.subscribeToRoom(room.id)}># {room.name}</div>\n            </div>\n          )\n        })}\n\n    </div>\n  );\n};\n\n// RoomList.propTypes = {\n\n// };\n\nexport default RoomList;","import React from 'react'\n\nclass NewRoomForm extends React.Component {\n  state = {\n    roomName: '',\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      roomName: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.handleCreateRoom(this.state.roomName);\n    this.setState({ roomName: '' })\n  }\n\n  handleFocus = (e) => {\n    console.log('object got here?', e)\n    this.setState({roomName: ''})\n  }\n\n  render() {\n    return (\n      <div className=\"new-room-form\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            onFocus={this.handleFocus}\n            onChange={this.handleChange}\n            value={this.state.roomName}\n            type=\"text\"\n            placeholder=\"NewRoomForm\"\n            required />\n          <button id=\"create-room-btn\" type=\"submit\">+</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default NewRoomForm","import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit';\nimport each from 'lodash/each';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { MessageList } from './Component/MessageList';\nimport { MessageForm } from './Component/MessageForm';\nimport { RoomList } from './Component/RoomList';\nimport { NewRoomForm } from './Component/NewRoomForm';\n\nimport { tokenUrl, instanceLocator } from './config/chatkit';\n// import messages from './data/messages';\n\n\nconst theme = {\n  '--main-color': '#145CBE',\n  '--primary-message-color': '#000000',\n  '--secondary-message-color': '#3e5869',\n  '--main-text-color': '#FFFFFF',\n  '--secondary-text-color': '#b0c7d6',\n  '--send-message-form': '#F5F5F5',\n  '--background-color': '#FFFFFF',\n};\n\nclass App extends Component {\n  state = {\n    userId: '',\n    messages: [],\n    joinableRooms: [],\n    joinedRooms: [],\n    roomId: null,\n    theme\n  }\n\n  componentDidMount() {\n    this.updateCSSVariables(this.state.theme);\n    this.setState({ userId: this.props.match.params.userId }, () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator,\n        userId: this.state.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: tokenUrl\n        })\n      })\n\n      chatManager.connect()\n        .then(currentUser => {\n          this.currentUser = currentUser;\n          this.getRooms();\n          // this.subscribeToRoom();\n        })\n        .catch(error => {\n          console.error(\"error:\", error);\n        })\n    })\n  }\n\n  getRooms = () => {\n    this.currentUser.getJoinableRooms()\n      .then(joinableRooms => {\n        // console.log('object test', this.currentUser.rooms)\n        this.setState({\n          joinableRooms,\n          joinedRooms: this.currentUser.rooms\n        })\n      })\n      .catch(error => {\n        console.error(\"error:\", error);\n      })\n  }\n\n  subscribeToRoom = (roomId) => {\n    this.setState({ messages: [] });\n    this.currentUser\n      .subscribeToRoom({\n        roomId: roomId,\n        messageLimit: 30,\n        hooks: {\n          onNewMessage: message =>\n            this.setState({ messages: [...this.state.messages, message] })\n        }\n      })\n      .then(room => {\n        this.setState({ roomId: room.id })\n        this.getRooms();\n      })\n      .catch(error => {\n        console.error(\"error subscribing to room:\", error);\n      })\n  }\n\n  handleSendMessage = (text) => {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId,\n    });\n  }\n\n  handleCreateRoom = (name) => {\n    this.currentUser\n      .createRoom({ name })\n      .then(room => this.subscribeToRoom(room.id))\n      .catch(err => console.log('error with createRoom: ', err))\n  }\n\n  updateCSSVariables = (variables) => {\n    each(variables, (value, prop) => {\n      document.documentElement.style.setProperty(prop, value);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <RoomList\n          subscribeToRoom={this.subscribeToRoom}\n          roomId={this.state.roomId}\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n        />\n        <MessageList\n          currentUser={this.state.userId}\n          roomId={this.state.roomId}\n          messages={this.state.messages}\n        />\n        <MessageForm\n          disabled={!this.state.roomId}\n          handleSendMessage={this.handleSendMessage}\n        />\n        <NewRoomForm handleCreateRoom={this.handleCreateRoom} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/c6162ea6-4146-453d-b328-36e340a9508d/token\";\nconst instanceLocator = \"v1:us1:c6162ea6-4146-453d-b328-36e340a9508d\";\n\nexport { tokenUrl, instanceLocator }","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nimport './styles.css';\n\nclass Register extends Component {\n  state = {\n    userId: '',\n    isExist: false,\n    users: '',\n  }\n\n  componentDidMount() {\n    this.fetchUsers()\n      .then(users => {\n        this.setState({ users })\n      })\n      .catch(err => console.log(err));\n  }\n\n  fetchUsers = async () => {\n    const response = await fetch('/api/users');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleChange = (event) => {\n    const userId = event.target.value;\n    this.setState({ userId });\n\n    // Check if user already existed\n    const isExist = this.state.users.some(user => user.id === userId)\n\n    if (isExist)\n      this.setState({ isExist: true })\n    else\n      this.setState({ isExist: false })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // If userId exist, go to main chat-app\n    if (this.state.isExist) {\n      this.props.history.push(`/chat-app/${this.state.userId}`)\n    }\n    // create new user, then go to main chat-app\n    else {\n      this.registerNewUser(this.state.userId)\n        .then(newUser => {\n          this.props.history.push(`/chat-app/${newUser.id}`)\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  registerNewUser = async (userId) => {\n    const response = await fetch('/api/register', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId })\n    });\n\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  }\n\n  render() {\n    return (\n      <div className=\"register-container\">\n        <form onSubmit={this.handleSubmit} className=\"register-form\">\n          <h2 style={{ textTransform: \"capitalize\" }}>Please enter username</h2>\n          <input\n            type=\"text\"\n            required\n            value={this.state.userId}\n            onChange={this.handleChange}\n            placeholder=\"Enter your username here\"\n          />\n          {this.state.isExist\n            ? <button className=\"register-button\" type=\"submit\"> Login </button>\n            : <button className=\"register-button\" type=\"submit\"> Register </button>\n          }\n\n        </form>\n      </div>\n    );\n  }\n}\n\n// Register.propTypes = {\n\n// };\n\nexport default Register;","import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <div>\n      Room not found\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport App from '../App';\nimport { Register } from '../Component/Register';\nimport { NotFound } from '../Component/NotFound';\n\nconst MyRouter = (props) => {\n  return (\n    <Switch>\n      <Route path=\"/chat-app/:userId\" component={App} />\n      <Route exact path=\"/\" component={Register} />\n      <Route component={NotFound} />\n    </Switch>\n  )\n}\n\nexport default MyRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\n// import App from './App';\nimport MyRouter from './config/routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <BrowserRouter>\n    <MyRouter />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}